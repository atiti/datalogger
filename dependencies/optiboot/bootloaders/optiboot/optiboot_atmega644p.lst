
optiboot_atmega644p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  0000fc00  0000fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000b58  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a4a  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <main>:
    fc00:	84 b7       	in	r24, 0x34	; 52
    fc02:	14 be       	out	0x34, r1	; 52
    fc04:	81 ff       	sbrs	r24, 1
    fc06:	e6 d0       	rcall	.+460    	; 0xfdd4 <appStart>
    fc08:	85 e0       	ldi	r24, 0x05	; 5
    fc0a:	80 93 81 00 	sts	0x0081, r24
    fc0e:	82 e0       	ldi	r24, 0x02	; 2
    fc10:	80 93 c0 00 	sts	0x00C0, r24
    fc14:	88 e1       	ldi	r24, 0x18	; 24
    fc16:	80 93 c1 00 	sts	0x00C1, r24
    fc1a:	86 e0       	ldi	r24, 0x06	; 6
    fc1c:	80 93 c2 00 	sts	0x00C2, r24
    fc20:	80 e1       	ldi	r24, 0x10	; 16
    fc22:	80 93 c4 00 	sts	0x00C4, r24
    fc26:	8e e0       	ldi	r24, 0x0E	; 14
    fc28:	cf d0       	rcall	.+414    	; 0xfdc8 <watchdogConfig>
    fc2a:	20 9a       	sbi	0x04, 0	; 4
    fc2c:	86 e0       	ldi	r24, 0x06	; 6
    fc2e:	20 e3       	ldi	r18, 0x30	; 48
    fc30:	3c ef       	ldi	r19, 0xFC	; 252
    fc32:	91 e0       	ldi	r25, 0x01	; 1
    fc34:	30 93 85 00 	sts	0x0085, r19
    fc38:	20 93 84 00 	sts	0x0084, r18
    fc3c:	96 bb       	out	0x16, r25	; 22
    fc3e:	b0 9b       	sbis	0x16, 0	; 22
    fc40:	fe cf       	rjmp	.-4      	; 0xfc3e <main+0x3e>
    fc42:	18 9a       	sbi	0x03, 0	; 3
    fc44:	a8 95       	wdr
    fc46:	81 50       	subi	r24, 0x01	; 1
    fc48:	a9 f7       	brne	.-22     	; 0xfc34 <main+0x34>
    fc4a:	dd 24       	eor	r13, r13
    fc4c:	d3 94       	inc	r13
    fc4e:	a5 e0       	ldi	r26, 0x05	; 5
    fc50:	ea 2e       	mov	r14, r26
    fc52:	f1 e1       	ldi	r31, 0x11	; 17
    fc54:	ff 2e       	mov	r15, r31
    fc56:	ab d0       	rcall	.+342    	; 0xfdae <getch>
    fc58:	81 34       	cpi	r24, 0x41	; 65
    fc5a:	21 f4       	brne	.+8      	; 0xfc64 <main+0x64>
    fc5c:	81 e0       	ldi	r24, 0x01	; 1
    fc5e:	c5 d0       	rcall	.+394    	; 0xfdea <getNch>
    fc60:	83 e0       	ldi	r24, 0x03	; 3
    fc62:	20 c0       	rjmp	.+64     	; 0xfca4 <main+0xa4>
    fc64:	82 34       	cpi	r24, 0x42	; 66
    fc66:	11 f4       	brne	.+4      	; 0xfc6c <main+0x6c>
    fc68:	84 e1       	ldi	r24, 0x14	; 20
    fc6a:	03 c0       	rjmp	.+6      	; 0xfc72 <main+0x72>
    fc6c:	85 34       	cpi	r24, 0x45	; 69
    fc6e:	19 f4       	brne	.+6      	; 0xfc76 <main+0x76>
    fc70:	85 e0       	ldi	r24, 0x05	; 5
    fc72:	bb d0       	rcall	.+374    	; 0xfdea <getNch>
    fc74:	91 c0       	rjmp	.+290    	; 0xfd98 <main+0x198>
    fc76:	85 35       	cpi	r24, 0x55	; 85
    fc78:	81 f4       	brne	.+32     	; 0xfc9a <main+0x9a>
    fc7a:	99 d0       	rcall	.+306    	; 0xfdae <getch>
    fc7c:	08 2f       	mov	r16, r24
    fc7e:	10 e0       	ldi	r17, 0x00	; 0
    fc80:	96 d0       	rcall	.+300    	; 0xfdae <getch>
    fc82:	90 e0       	ldi	r25, 0x00	; 0
    fc84:	98 2f       	mov	r25, r24
    fc86:	88 27       	eor	r24, r24
    fc88:	80 2b       	or	r24, r16
    fc8a:	91 2b       	or	r25, r17
    fc8c:	88 0f       	add	r24, r24
    fc8e:	99 1f       	adc	r25, r25
    fc90:	90 93 01 03 	sts	0x0301, r25
    fc94:	80 93 00 03 	sts	0x0300, r24
    fc98:	7e c0       	rjmp	.+252    	; 0xfd96 <main+0x196>
    fc9a:	86 35       	cpi	r24, 0x56	; 86
    fc9c:	29 f4       	brne	.+10     	; 0xfca8 <main+0xa8>
    fc9e:	84 e0       	ldi	r24, 0x04	; 4
    fca0:	a4 d0       	rcall	.+328    	; 0xfdea <getNch>
    fca2:	80 e0       	ldi	r24, 0x00	; 0
    fca4:	7c d0       	rcall	.+248    	; 0xfd9e <putch>
    fca6:	78 c0       	rjmp	.+240    	; 0xfd98 <main+0x198>
    fca8:	84 36       	cpi	r24, 0x64	; 100
    fcaa:	09 f0       	breq	.+2      	; 0xfcae <main+0xae>
    fcac:	4e c0       	rjmp	.+156    	; 0xfd4a <main+0x14a>
    fcae:	87 d0       	rcall	.+270    	; 0xfdbe <getLen>
    fcb0:	e0 91 00 03 	lds	r30, 0x0300
    fcb4:	f0 91 01 03 	lds	r31, 0x0301
    fcb8:	80 ee       	ldi	r24, 0xE0	; 224
    fcba:	e0 30       	cpi	r30, 0x00	; 0
    fcbc:	f8 07       	cpc	r31, r24
    fcbe:	18 f4       	brcc	.+6      	; 0xfcc6 <main+0xc6>
    fcc0:	83 e0       	ldi	r24, 0x03	; 3
    fcc2:	87 bf       	out	0x37, r24	; 55
    fcc4:	e8 95       	spm
    fcc6:	c0 e0       	ldi	r28, 0x00	; 0
    fcc8:	d1 e0       	ldi	r29, 0x01	; 1
    fcca:	71 d0       	rcall	.+226    	; 0xfdae <getch>
    fccc:	89 93       	st	Y+, r24
    fcce:	80 91 02 03 	lds	r24, 0x0302
    fcd2:	81 50       	subi	r24, 0x01	; 1
    fcd4:	80 93 02 03 	sts	0x0302, r24
    fcd8:	88 23       	and	r24, r24
    fcda:	b9 f7       	brne	.-18     	; 0xfcca <main+0xca>
    fcdc:	e0 91 00 03 	lds	r30, 0x0300
    fce0:	f0 91 01 03 	lds	r31, 0x0301
    fce4:	80 ee       	ldi	r24, 0xE0	; 224
    fce6:	e0 30       	cpi	r30, 0x00	; 0
    fce8:	f8 07       	cpc	r31, r24
    fcea:	18 f0       	brcs	.+6      	; 0xfcf2 <main+0xf2>
    fcec:	83 e0       	ldi	r24, 0x03	; 3
    fcee:	87 bf       	out	0x37, r24	; 55
    fcf0:	e8 95       	spm
    fcf2:	75 d0       	rcall	.+234    	; 0xfdde <verifySpace>
    fcf4:	07 b6       	in	r0, 0x37	; 55
    fcf6:	00 fc       	sbrc	r0, 0
    fcf8:	fd cf       	rjmp	.-6      	; 0xfcf4 <main+0xf4>
    fcfa:	40 91 00 03 	lds	r20, 0x0300
    fcfe:	50 91 01 03 	lds	r21, 0x0301
    fd02:	a0 e0       	ldi	r26, 0x00	; 0
    fd04:	b1 e0       	ldi	r27, 0x01	; 1
    fd06:	2c 91       	ld	r18, X
    fd08:	30 e0       	ldi	r19, 0x00	; 0
    fd0a:	11 96       	adiw	r26, 0x01	; 1
    fd0c:	8c 91       	ld	r24, X
    fd0e:	11 97       	sbiw	r26, 0x01	; 1
    fd10:	90 e0       	ldi	r25, 0x00	; 0
    fd12:	98 2f       	mov	r25, r24
    fd14:	88 27       	eor	r24, r24
    fd16:	82 2b       	or	r24, r18
    fd18:	93 2b       	or	r25, r19
    fd1a:	12 96       	adiw	r26, 0x02	; 2
    fd1c:	fa 01       	movw	r30, r20
    fd1e:	0c 01       	movw	r0, r24
    fd20:	d7 be       	out	0x37, r13	; 55
    fd22:	e8 95       	spm
    fd24:	11 24       	eor	r1, r1
    fd26:	4e 5f       	subi	r20, 0xFE	; 254
    fd28:	5f 4f       	sbci	r21, 0xFF	; 255
    fd2a:	f2 e0       	ldi	r31, 0x02	; 2
    fd2c:	a0 30       	cpi	r26, 0x00	; 0
    fd2e:	bf 07       	cpc	r27, r31
    fd30:	51 f7       	brne	.-44     	; 0xfd06 <main+0x106>
    fd32:	e0 91 00 03 	lds	r30, 0x0300
    fd36:	f0 91 01 03 	lds	r31, 0x0301
    fd3a:	e7 be       	out	0x37, r14	; 55
    fd3c:	e8 95       	spm
    fd3e:	07 b6       	in	r0, 0x37	; 55
    fd40:	00 fc       	sbrc	r0, 0
    fd42:	fd cf       	rjmp	.-6      	; 0xfd3e <main+0x13e>
    fd44:	f7 be       	out	0x37, r15	; 55
    fd46:	e8 95       	spm
    fd48:	27 c0       	rjmp	.+78     	; 0xfd98 <main+0x198>
    fd4a:	84 37       	cpi	r24, 0x74	; 116
    fd4c:	b9 f4       	brne	.+46     	; 0xfd7c <main+0x17c>
    fd4e:	37 d0       	rcall	.+110    	; 0xfdbe <getLen>
    fd50:	46 d0       	rcall	.+140    	; 0xfdde <verifySpace>
    fd52:	e0 91 00 03 	lds	r30, 0x0300
    fd56:	f0 91 01 03 	lds	r31, 0x0301
    fd5a:	31 96       	adiw	r30, 0x01	; 1
    fd5c:	f0 93 01 03 	sts	0x0301, r31
    fd60:	e0 93 00 03 	sts	0x0300, r30
    fd64:	31 97       	sbiw	r30, 0x01	; 1
    fd66:	e4 91       	lpm	r30, Z+
    fd68:	8e 2f       	mov	r24, r30
    fd6a:	19 d0       	rcall	.+50     	; 0xfd9e <putch>
    fd6c:	80 91 02 03 	lds	r24, 0x0302
    fd70:	81 50       	subi	r24, 0x01	; 1
    fd72:	80 93 02 03 	sts	0x0302, r24
    fd76:	88 23       	and	r24, r24
    fd78:	61 f7       	brne	.-40     	; 0xfd52 <main+0x152>
    fd7a:	0e c0       	rjmp	.+28     	; 0xfd98 <main+0x198>
    fd7c:	85 37       	cpi	r24, 0x75	; 117
    fd7e:	39 f4       	brne	.+14     	; 0xfd8e <main+0x18e>
    fd80:	2e d0       	rcall	.+92     	; 0xfdde <verifySpace>
    fd82:	8e e1       	ldi	r24, 0x1E	; 30
    fd84:	0c d0       	rcall	.+24     	; 0xfd9e <putch>
    fd86:	86 e9       	ldi	r24, 0x96	; 150
    fd88:	0a d0       	rcall	.+20     	; 0xfd9e <putch>
    fd8a:	8a e0       	ldi	r24, 0x0A	; 10
    fd8c:	8b cf       	rjmp	.-234    	; 0xfca4 <main+0xa4>
    fd8e:	81 35       	cpi	r24, 0x51	; 81
    fd90:	11 f4       	brne	.+4      	; 0xfd96 <main+0x196>
    fd92:	88 e0       	ldi	r24, 0x08	; 8
    fd94:	19 d0       	rcall	.+50     	; 0xfdc8 <watchdogConfig>
    fd96:	23 d0       	rcall	.+70     	; 0xfdde <verifySpace>
    fd98:	80 e1       	ldi	r24, 0x10	; 16
    fd9a:	01 d0       	rcall	.+2      	; 0xfd9e <putch>
    fd9c:	5c cf       	rjmp	.-328    	; 0xfc56 <main+0x56>

0000fd9e <putch>:
    }
    putch(STK_OK);
  }
}

void putch(char ch) {
    fd9e:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    fda0:	80 91 c0 00 	lds	r24, 0x00C0
    fda4:	85 ff       	sbrs	r24, 5
    fda6:	fc cf       	rjmp	.-8      	; 0xfda0 <putch+0x2>
  UDR0 = ch;
    fda8:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    fdac:	08 95       	ret

0000fdae <getch>:
  return getch();
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fdae:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)));
    fdb0:	80 91 c0 00 	lds	r24, 0x00C0
    fdb4:	87 ff       	sbrs	r24, 7
    fdb6:	fc cf       	rjmp	.-8      	; 0xfdb0 <getch+0x2>
  ch = UDR0;
    fdb8:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fdbc:	08 95       	ret

0000fdbe <getLen>:
  } while (--count);
}
#endif

uint8_t getLen() {
  getch();
    fdbe:	f7 df       	rcall	.-18     	; 0xfdae <getch>
  length = getch();
    fdc0:	f6 df       	rcall	.-20     	; 0xfdae <getch>
    fdc2:	80 93 02 03 	sts	0x0302, r24
  return getch();
    fdc6:	f3 cf       	rjmp	.-26     	; 0xfdae <getch>

0000fdc8 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fdc8:	e0 e6       	ldi	r30, 0x60	; 96
    fdca:	f0 e0       	ldi	r31, 0x00	; 0
    fdcc:	98 e1       	ldi	r25, 0x18	; 24
    fdce:	90 83       	st	Z, r25
  WDTCSR = x;
    fdd0:	80 83       	st	Z, r24
}
    fdd2:	08 95       	ret

0000fdd4 <appStart>:

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    fdd4:	80 e0       	ldi	r24, 0x00	; 0
    fdd6:	f8 df       	rcall	.-16     	; 0xfdc8 <watchdogConfig>
  __asm__ __volatile__ (
    fdd8:	ee 27       	eor	r30, r30
    fdda:	ff 27       	eor	r31, r31
    fddc:	09 94       	ijmp

0000fdde <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) appStart();
    fdde:	e7 df       	rcall	.-50     	; 0xfdae <getch>
    fde0:	80 32       	cpi	r24, 0x20	; 32
    fde2:	09 f0       	breq	.+2      	; 0xfde6 <verifySpace+0x8>
    fde4:	f7 df       	rcall	.-18     	; 0xfdd4 <appStart>
  putch(STK_INSYNC);
    fde6:	84 e1       	ldi	r24, 0x14	; 20
    fde8:	da cf       	rjmp	.-76     	; 0xfd9e <putch>

0000fdea <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fdea:	1f 93       	push	r17
    fdec:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    fdee:	df df       	rcall	.-66     	; 0xfdae <getch>
    fdf0:	11 50       	subi	r17, 0x01	; 1
    fdf2:	e9 f7       	brne	.-6      	; 0xfdee <getNch+0x4>
  verifySpace();
    fdf4:	f4 df       	rcall	.-24     	; 0xfdde <verifySpace>
}
    fdf6:	1f 91       	pop	r17
    fdf8:	08 95       	ret
