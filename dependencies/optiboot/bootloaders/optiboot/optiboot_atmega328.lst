
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  00007e00  00007e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000b58  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a4a  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
    7e00:	84 b7       	in	r24, 0x34	; 52
    7e02:	14 be       	out	0x34, r1	; 52
    7e04:	81 ff       	sbrs	r24, 1
    7e06:	e6 d0       	rcall	.+460    	; 0x7fd4 <appStart>
    7e08:	85 e0       	ldi	r24, 0x05	; 5
    7e0a:	80 93 81 00 	sts	0x0081, r24
    7e0e:	82 e0       	ldi	r24, 0x02	; 2
    7e10:	80 93 c0 00 	sts	0x00C0, r24
    7e14:	88 e1       	ldi	r24, 0x18	; 24
    7e16:	80 93 c1 00 	sts	0x00C1, r24
    7e1a:	86 e0       	ldi	r24, 0x06	; 6
    7e1c:	80 93 c2 00 	sts	0x00C2, r24
    7e20:	80 e1       	ldi	r24, 0x10	; 16
    7e22:	80 93 c4 00 	sts	0x00C4, r24
    7e26:	8e e0       	ldi	r24, 0x0E	; 14
    7e28:	cf d0       	rcall	.+414    	; 0x7fc8 <watchdogConfig>
    7e2a:	25 9a       	sbi	0x04, 5	; 4
    7e2c:	86 e0       	ldi	r24, 0x06	; 6
    7e2e:	20 e3       	ldi	r18, 0x30	; 48
    7e30:	3c ef       	ldi	r19, 0xFC	; 252
    7e32:	91 e0       	ldi	r25, 0x01	; 1
    7e34:	30 93 85 00 	sts	0x0085, r19
    7e38:	20 93 84 00 	sts	0x0084, r18
    7e3c:	96 bb       	out	0x16, r25	; 22
    7e3e:	b0 9b       	sbis	0x16, 0	; 22
    7e40:	fe cf       	rjmp	.-4      	; 0x7e3e <main+0x3e>
    7e42:	1d 9a       	sbi	0x03, 5	; 3
    7e44:	a8 95       	wdr
    7e46:	81 50       	subi	r24, 0x01	; 1
    7e48:	a9 f7       	brne	.-22     	; 0x7e34 <main+0x34>
    7e4a:	dd 24       	eor	r13, r13
    7e4c:	d3 94       	inc	r13
    7e4e:	a5 e0       	ldi	r26, 0x05	; 5
    7e50:	ea 2e       	mov	r14, r26
    7e52:	f1 e1       	ldi	r31, 0x11	; 17
    7e54:	ff 2e       	mov	r15, r31
    7e56:	ab d0       	rcall	.+342    	; 0x7fae <getch>
    7e58:	81 34       	cpi	r24, 0x41	; 65
    7e5a:	21 f4       	brne	.+8      	; 0x7e64 <main+0x64>
    7e5c:	81 e0       	ldi	r24, 0x01	; 1
    7e5e:	c5 d0       	rcall	.+394    	; 0x7fea <getNch>
    7e60:	83 e0       	ldi	r24, 0x03	; 3
    7e62:	20 c0       	rjmp	.+64     	; 0x7ea4 <main+0xa4>
    7e64:	82 34       	cpi	r24, 0x42	; 66
    7e66:	11 f4       	brne	.+4      	; 0x7e6c <main+0x6c>
    7e68:	84 e1       	ldi	r24, 0x14	; 20
    7e6a:	03 c0       	rjmp	.+6      	; 0x7e72 <main+0x72>
    7e6c:	85 34       	cpi	r24, 0x45	; 69
    7e6e:	19 f4       	brne	.+6      	; 0x7e76 <main+0x76>
    7e70:	85 e0       	ldi	r24, 0x05	; 5
    7e72:	bb d0       	rcall	.+374    	; 0x7fea <getNch>
    7e74:	91 c0       	rjmp	.+290    	; 0x7f98 <main+0x198>
    7e76:	85 35       	cpi	r24, 0x55	; 85
    7e78:	81 f4       	brne	.+32     	; 0x7e9a <main+0x9a>
    7e7a:	99 d0       	rcall	.+306    	; 0x7fae <getch>
    7e7c:	08 2f       	mov	r16, r24
    7e7e:	10 e0       	ldi	r17, 0x00	; 0
    7e80:	96 d0       	rcall	.+300    	; 0x7fae <getch>
    7e82:	90 e0       	ldi	r25, 0x00	; 0
    7e84:	98 2f       	mov	r25, r24
    7e86:	88 27       	eor	r24, r24
    7e88:	80 2b       	or	r24, r16
    7e8a:	91 2b       	or	r25, r17
    7e8c:	88 0f       	add	r24, r24
    7e8e:	99 1f       	adc	r25, r25
    7e90:	90 93 01 02 	sts	0x0201, r25
    7e94:	80 93 00 02 	sts	0x0200, r24
    7e98:	7e c0       	rjmp	.+252    	; 0x7f96 <main+0x196>
    7e9a:	86 35       	cpi	r24, 0x56	; 86
    7e9c:	29 f4       	brne	.+10     	; 0x7ea8 <main+0xa8>
    7e9e:	84 e0       	ldi	r24, 0x04	; 4
    7ea0:	a4 d0       	rcall	.+328    	; 0x7fea <getNch>
    7ea2:	80 e0       	ldi	r24, 0x00	; 0
    7ea4:	7c d0       	rcall	.+248    	; 0x7f9e <putch>
    7ea6:	78 c0       	rjmp	.+240    	; 0x7f98 <main+0x198>
    7ea8:	84 36       	cpi	r24, 0x64	; 100
    7eaa:	09 f0       	breq	.+2      	; 0x7eae <main+0xae>
    7eac:	4e c0       	rjmp	.+156    	; 0x7f4a <main+0x14a>
    7eae:	87 d0       	rcall	.+270    	; 0x7fbe <getLen>
    7eb0:	e0 91 00 02 	lds	r30, 0x0200
    7eb4:	f0 91 01 02 	lds	r31, 0x0201
    7eb8:	80 e7       	ldi	r24, 0x70	; 112
    7eba:	e0 30       	cpi	r30, 0x00	; 0
    7ebc:	f8 07       	cpc	r31, r24
    7ebe:	18 f4       	brcc	.+6      	; 0x7ec6 <main+0xc6>
    7ec0:	83 e0       	ldi	r24, 0x03	; 3
    7ec2:	87 bf       	out	0x37, r24	; 55
    7ec4:	e8 95       	spm
    7ec6:	c0 e0       	ldi	r28, 0x00	; 0
    7ec8:	d1 e0       	ldi	r29, 0x01	; 1
    7eca:	71 d0       	rcall	.+226    	; 0x7fae <getch>
    7ecc:	89 93       	st	Y+, r24
    7ece:	80 91 02 02 	lds	r24, 0x0202
    7ed2:	81 50       	subi	r24, 0x01	; 1
    7ed4:	80 93 02 02 	sts	0x0202, r24
    7ed8:	88 23       	and	r24, r24
    7eda:	b9 f7       	brne	.-18     	; 0x7eca <main+0xca>
    7edc:	e0 91 00 02 	lds	r30, 0x0200
    7ee0:	f0 91 01 02 	lds	r31, 0x0201
    7ee4:	80 e7       	ldi	r24, 0x70	; 112
    7ee6:	e0 30       	cpi	r30, 0x00	; 0
    7ee8:	f8 07       	cpc	r31, r24
    7eea:	18 f0       	brcs	.+6      	; 0x7ef2 <main+0xf2>
    7eec:	83 e0       	ldi	r24, 0x03	; 3
    7eee:	87 bf       	out	0x37, r24	; 55
    7ef0:	e8 95       	spm
    7ef2:	75 d0       	rcall	.+234    	; 0x7fde <verifySpace>
    7ef4:	07 b6       	in	r0, 0x37	; 55
    7ef6:	00 fc       	sbrc	r0, 0
    7ef8:	fd cf       	rjmp	.-6      	; 0x7ef4 <main+0xf4>
    7efa:	40 91 00 02 	lds	r20, 0x0200
    7efe:	50 91 01 02 	lds	r21, 0x0201
    7f02:	a0 e0       	ldi	r26, 0x00	; 0
    7f04:	b1 e0       	ldi	r27, 0x01	; 1
    7f06:	2c 91       	ld	r18, X
    7f08:	30 e0       	ldi	r19, 0x00	; 0
    7f0a:	11 96       	adiw	r26, 0x01	; 1
    7f0c:	8c 91       	ld	r24, X
    7f0e:	11 97       	sbiw	r26, 0x01	; 1
    7f10:	90 e0       	ldi	r25, 0x00	; 0
    7f12:	98 2f       	mov	r25, r24
    7f14:	88 27       	eor	r24, r24
    7f16:	82 2b       	or	r24, r18
    7f18:	93 2b       	or	r25, r19
    7f1a:	12 96       	adiw	r26, 0x02	; 2
    7f1c:	fa 01       	movw	r30, r20
    7f1e:	0c 01       	movw	r0, r24
    7f20:	d7 be       	out	0x37, r13	; 55
    7f22:	e8 95       	spm
    7f24:	11 24       	eor	r1, r1
    7f26:	4e 5f       	subi	r20, 0xFE	; 254
    7f28:	5f 4f       	sbci	r21, 0xFF	; 255
    7f2a:	f1 e0       	ldi	r31, 0x01	; 1
    7f2c:	a0 38       	cpi	r26, 0x80	; 128
    7f2e:	bf 07       	cpc	r27, r31
    7f30:	51 f7       	brne	.-44     	; 0x7f06 <main+0x106>
    7f32:	e0 91 00 02 	lds	r30, 0x0200
    7f36:	f0 91 01 02 	lds	r31, 0x0201
    7f3a:	e7 be       	out	0x37, r14	; 55
    7f3c:	e8 95       	spm
    7f3e:	07 b6       	in	r0, 0x37	; 55
    7f40:	00 fc       	sbrc	r0, 0
    7f42:	fd cf       	rjmp	.-6      	; 0x7f3e <main+0x13e>
    7f44:	f7 be       	out	0x37, r15	; 55
    7f46:	e8 95       	spm
    7f48:	27 c0       	rjmp	.+78     	; 0x7f98 <main+0x198>
    7f4a:	84 37       	cpi	r24, 0x74	; 116
    7f4c:	b9 f4       	brne	.+46     	; 0x7f7c <main+0x17c>
    7f4e:	37 d0       	rcall	.+110    	; 0x7fbe <getLen>
    7f50:	46 d0       	rcall	.+140    	; 0x7fde <verifySpace>
    7f52:	e0 91 00 02 	lds	r30, 0x0200
    7f56:	f0 91 01 02 	lds	r31, 0x0201
    7f5a:	31 96       	adiw	r30, 0x01	; 1
    7f5c:	f0 93 01 02 	sts	0x0201, r31
    7f60:	e0 93 00 02 	sts	0x0200, r30
    7f64:	31 97       	sbiw	r30, 0x01	; 1
    7f66:	e4 91       	lpm	r30, Z+
    7f68:	8e 2f       	mov	r24, r30
    7f6a:	19 d0       	rcall	.+50     	; 0x7f9e <putch>
    7f6c:	80 91 02 02 	lds	r24, 0x0202
    7f70:	81 50       	subi	r24, 0x01	; 1
    7f72:	80 93 02 02 	sts	0x0202, r24
    7f76:	88 23       	and	r24, r24
    7f78:	61 f7       	brne	.-40     	; 0x7f52 <main+0x152>
    7f7a:	0e c0       	rjmp	.+28     	; 0x7f98 <main+0x198>
    7f7c:	85 37       	cpi	r24, 0x75	; 117
    7f7e:	39 f4       	brne	.+14     	; 0x7f8e <main+0x18e>
    7f80:	2e d0       	rcall	.+92     	; 0x7fde <verifySpace>
    7f82:	8e e1       	ldi	r24, 0x1E	; 30
    7f84:	0c d0       	rcall	.+24     	; 0x7f9e <putch>
    7f86:	85 e9       	ldi	r24, 0x95	; 149
    7f88:	0a d0       	rcall	.+20     	; 0x7f9e <putch>
    7f8a:	8f e0       	ldi	r24, 0x0F	; 15
    7f8c:	8b cf       	rjmp	.-234    	; 0x7ea4 <main+0xa4>
    7f8e:	81 35       	cpi	r24, 0x51	; 81
    7f90:	11 f4       	brne	.+4      	; 0x7f96 <main+0x196>
    7f92:	88 e0       	ldi	r24, 0x08	; 8
    7f94:	19 d0       	rcall	.+50     	; 0x7fc8 <watchdogConfig>
    7f96:	23 d0       	rcall	.+70     	; 0x7fde <verifySpace>
    7f98:	80 e1       	ldi	r24, 0x10	; 16
    7f9a:	01 d0       	rcall	.+2      	; 0x7f9e <putch>
    7f9c:	5c cf       	rjmp	.-328    	; 0x7e56 <main+0x56>

00007f9e <putch>:
    }
    putch(STK_OK);
  }
}

void putch(char ch) {
    7f9e:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    7fa0:	80 91 c0 00 	lds	r24, 0x00C0
    7fa4:	85 ff       	sbrs	r24, 5
    7fa6:	fc cf       	rjmp	.-8      	; 0x7fa0 <putch+0x2>
  UDR0 = ch;
    7fa8:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7fac:	08 95       	ret

00007fae <getch>:
  return getch();
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fae:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)));
    7fb0:	80 91 c0 00 	lds	r24, 0x00C0
    7fb4:	87 ff       	sbrs	r24, 7
    7fb6:	fc cf       	rjmp	.-8      	; 0x7fb0 <getch+0x2>
  ch = UDR0;
    7fb8:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7fbc:	08 95       	ret

00007fbe <getLen>:
  } while (--count);
}
#endif

uint8_t getLen() {
  getch();
    7fbe:	f7 df       	rcall	.-18     	; 0x7fae <getch>
  length = getch();
    7fc0:	f6 df       	rcall	.-20     	; 0x7fae <getch>
    7fc2:	80 93 02 02 	sts	0x0202, r24
  return getch();
    7fc6:	f3 cf       	rjmp	.-26     	; 0x7fae <getch>

00007fc8 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fc8:	e0 e6       	ldi	r30, 0x60	; 96
    7fca:	f0 e0       	ldi	r31, 0x00	; 0
    7fcc:	98 e1       	ldi	r25, 0x18	; 24
    7fce:	90 83       	st	Z, r25
  WDTCSR = x;
    7fd0:	80 83       	st	Z, r24
}
    7fd2:	08 95       	ret

00007fd4 <appStart>:

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    7fd4:	80 e0       	ldi	r24, 0x00	; 0
    7fd6:	f8 df       	rcall	.-16     	; 0x7fc8 <watchdogConfig>
  __asm__ __volatile__ (
    7fd8:	ee 27       	eor	r30, r30
    7fda:	ff 27       	eor	r31, r31
    7fdc:	09 94       	ijmp

00007fde <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) appStart();
    7fde:	e7 df       	rcall	.-50     	; 0x7fae <getch>
    7fe0:	80 32       	cpi	r24, 0x20	; 32
    7fe2:	09 f0       	breq	.+2      	; 0x7fe6 <verifySpace+0x8>
    7fe4:	f7 df       	rcall	.-18     	; 0x7fd4 <appStart>
  putch(STK_INSYNC);
    7fe6:	84 e1       	ldi	r24, 0x14	; 20
    7fe8:	da cf       	rjmp	.-76     	; 0x7f9e <putch>

00007fea <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fea:	1f 93       	push	r17
    7fec:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    7fee:	df df       	rcall	.-66     	; 0x7fae <getch>
    7ff0:	11 50       	subi	r17, 0x01	; 1
    7ff2:	e9 f7       	brne	.-6      	; 0x7fee <getNch+0x4>
  verifySpace();
    7ff4:	f4 df       	rcall	.-24     	; 0x7fde <verifySpace>
}
    7ff6:	1f 91       	pop	r17
    7ff8:	08 95       	ret
